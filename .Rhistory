knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(class)
library(neuralnet)
library(kernlab) # for svm
library(C50) # for decision trees
library(tidyr)
library(dplyr)
library(janitor)
library(randomForest)
heart <- read.csv("heart.csv", stringsAsFactors = TRUE)
View(heart)
summary(heart)
heart_mm <- as.data.frame(model.matrix(~., -1, data = heart))
heart_mm <- clean_names(heart_mm)
heart_mm$intercept <- NULL
#Normalize the data
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# we are going to normalize for KNN and ANN
heart_norm <- as.data.frame(lapply(heart_mm, normalize))
str(heart_norm)
ratio <- 0.6
set.seed(12345)
train_rows <- sample(1:nrow(heart_norm), ratio*nrow(heart_norm))
train_data <- heart_norm[train_rows, ]
test_data <- heart_norm[-train_rows, ]
set.seed(12345)
rf_model <- randomForest(target_variable ~ ., data = train_data, ntree = 500)
set.seed(12345)
rf_model <- randomForest(heart_disease ~ ., data = train_data, ntree = 500)
plot(rf_model)
set.seed(12345)
rf_predict <- predict(rf_model, test_data, type = "response")
confusionMatrix(as.factor(rf_predict), as.factor(test_data$heart_disease), positive = "1")
set.seed(12345)
rf_model <- randomForest(heart_disease ~ ., data = train_data, ntree = 500)
plot(rf_model)
set.seed(12345)
rf_predict <- predict(rf_model, test_data, type = "response")
rf_bin_predict <- ifelse(ann_predict >= .3, 1, 0)
set.seed(12345)
rf_model <- randomForest(heart_disease ~ ., data = train_data, ntree = 500)
plot(rf_model)
set.seed(12345)
rf_predict <- predict(rf_model, test_data, type = "response")
rf_bin_predict <- ifelse(rf_predict >= .3, 1, 0)
confusionMatrix(as.factor(rf_bin_predict), as.factor(test_data$heart_disease), positive = "1")
set.seed(12345)
rf_model <- randomForest(heart_disease ~ ., data = train_data, ntree = 1000)
plot(rf_model)
set.seed(12345)
rf_predict <- predict(rf_model, test_data, type = "response")
rf_bin_predict <- ifelse(rf_predict >= .3, 1, 0)
confusionMatrix(as.factor(rf_bin_predict), as.factor(test_data$heart_disease), positive = "1")
set.seed(12345)
rf_model <- randomForest(heart_disease ~ ., data = train_data, ntree = 3)
plot(rf_model)
set.seed(12345)
rf_predict <- predict(rf_model, test_data, type = "response")
rf_bin_predict <- ifelse(rf_predict >= .3, 1, 0)
confusionMatrix(as.factor(rf_bin_predict), as.factor(test_data$heart_disease), positive = "1")
set.seed(12345)
rf_model <- randomForest(heart_disease ~ ., data = train_data, ntree = 5000)
plot(rf_model)
set.seed(12345)
rf_predict <- predict(rf_model, test_data, type = "response")
rf_bin_predict <- ifelse(rf_predict >= .3, 1, 0)
confusionMatrix(as.factor(rf_bin_predict), as.factor(test_data$heart_disease), positive = "1")
set.seed(12345)
rf_model <- randomForest(heart_disease ~ ., data = train_data, ntree = 750)
plot(rf_model)
set.seed(12345)
rf_predict <- predict(rf_model, test_data, type = "response")
rf_bin_predict <- ifelse(rf_predict >= .3, 1, 0)
confusionMatrix(as.factor(rf_bin_predict), as.factor(test_data$heart_disease), positive = "1")
set.seed(12345)
rf_model <- randomForest(heart_disease ~ ., data = train_data, ntree = 1000)
plot(rf_model)
set.seed(12345)
rf_predict <- predict(rf_model, test_data, type = "response")
rf_bin_predict <- ifelse(rf_predict >= .3, 1, 0)
confusionMatrix(as.factor(rf_bin_predict), as.factor(test_data$heart_disease), positive = "1")
set.seed(12345)
rf_model <- randomForest(heart_disease ~ ., data = train_data, ntree = 200)
plot(rf_model)
set.seed(12345)
rf_predict <- predict(rf_model, test_data, type = "response")
rf_bin_predict <- ifelse(rf_predict >= .3, 1, 0)
confusionMatrix(as.factor(rf_bin_predict), as.factor(test_data$heart_disease), positive = "1")
set.seed(12345)
rf_model <- randomForest(heart_disease ~ ., data = train_data, ntree = 150)
plot(rf_model)
set.seed(12345)
rf_predict <- predict(rf_model, test_data, type = "response")
rf_bin_predict <- ifelse(rf_predict >= .3, 1, 0)
confusionMatrix(as.factor(rf_bin_predict), as.factor(test_data$heart_disease), positive = "1")
set.seed(12345)
rf_model <- randomForest(heart_disease ~ ., data = train_data, ntree = 200)
plot(rf_model)
set.seed(12345)
rf_predict <- predict(rf_model, test_data, type = "response")
rf_bin_predict <- ifelse(rf_predict >= .3, 1, 0)
confusionMatrix(as.factor(rf_bin_predict), as.factor(test_data$heart_disease), positive = "1")
knitr::opts_chunk$set(echo = TRUE)
# Build Decision Tree Model of Models
combined_model <- C5.0(as.factor(test_data_labels) ~., data = combined_train, cost = error_cost)
# New Data frame with raw prediction values from all models
combined <- data.frame(
lr_predict,
knn_predict,
ann_predict,
svm_rbf_predict,
svm_laplace_predict,
svm_vanilla_predict,
tree_predict,
test_data_labels
)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(class)
library(neuralnet)
library(kernlab) # for svm
library(C50) # for decision trees
library(randomForest)
library(tidyr)
library(dplyr)
library(janitor)
heart <- read.csv("heart.csv", stringsAsFactors = TRUE)
summary(heart)
heart_mm <- as.data.frame(model.matrix(~., -1, data = heart))
heart_mm <- clean_names(heart_mm)
heart_mm$intercept <- NULL
#Normalize the data
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# we are going to normalize for KNN and ANN
heart_norm <- as.data.frame(lapply(heart_mm, normalize))
str(heart_norm)
set.seed(12345)
# Train/Test Proportion
ratio <- 0.6
# Split Train and Test Data
train_rows <- sample(1:nrow(heart_norm), ratio*nrow(heart_norm))
train_data <- heart_norm[train_rows, ]
test_data <- heart_norm[-train_rows, ]
# Traina and Test without Labels
train_data_predictors <- train_data[,-16]
test_data_predictors <- test_data[,-16]
# Labels for Train and Test Sets
train_data_labels <- train_data[,16]
test_data_labels <- test_data[,16]
set.seed(12345)
# Build model
lr_model <- glm(heart_disease ~., family = "binomial", data = train_data)
summary(lr_model)
lr_predict <- predict(lr_model, test_data, type = "response")
lr_bin <- ifelse(lr_predict >= 0.5, 1, 0)
confusionMatrix(as.factor(lr_bin), as.factor(test_data_labels), positive = "1")
set.seed(12345)
# Build Model
tree_model <- C5.0(as.factor(heart_disease) ~. ,data = train_data)
# Predict
tree_predict <- predict(tree_model, test_data)
# Confusion Matrix
confusionMatrix(as.factor(tree_predict), as.factor(test_data_labels), positive = "1")
set.seed(12345)
# Model and Predictions
knn_predict <- knn(train_data_predictors, test_data_predictors, train_data_labels, k = 21, prob = 0.4)
# Confusion Matrix
knn_matrix <- as.data.frame(as.table(confusionMatrix(as.factor(knn_predict), as.factor(test_data_labels), positive = "1")))
# Confusion Matrix
confusionMatrix(as.factor(knn_predict), as.factor(test_data_labels), positive = "1")
set.seed(12345)
# Build model
ann_model <- neuralnet(heart_disease ~ ., data = train_data, hidden = c(4,2), threshold = 0.01, stepmax = 1e+08, algorithm = "slr")
# Plot Model
plot(ann_model)
# Predict
ann_predict <- predict(ann_model, test_data, type = "response")
test_ann_predict <- ifelse(ann_predict >= .3, 1, 0)
# Confusion Matrix
ann_matrix <- as.data.frame(as.table(confusionMatrix(as.factor(test_ann_predict), as.factor(test_data$heart_disease), positive = "1")))
# Confusion Matrix
confusionMatrix(as.factor(test_ann_predict), as.factor(test_data$heart_disease), positive = "1")
set.seed(12345)
# Build model
rf_model <- randomForest(heart_disease ~ ., data = train_data, ntree = 200)
# Plot model
plot(rf_model)
# Predict
rf_predict <- predict(rf_model, test_data, type = "response")
# Make output binary
rf_bin_predict <- ifelse(rf_predict >= .3, 1, 0)
# Confusion Matrix
confusionMatrix(as.factor(rf_bin_predict), as.factor(test_data$heart_disease), positive = "1")
# Laplace Model
svm_laplace_model <- ksvm(heart_disease ~ ., data = train_data, kernel = "laplacedot")
svm_laplace_predict <- predict(svm_laplace_model, test_data)
svm_laplace_bin <- ifelse(svm_laplace_predict >= 0.5, 1, 0)
confusionMatrix(as.factor(svm_laplace_bin), as.factor(test_data_labels))
# Vanilla Model
svm_vanilla_model <- ksvm(heart_disease ~ ., data = train_data, kernel = "vanilladot")
svm_vanilla_predict <- predict(svm_vanilla_model, test_data)
svm_vanilla_bin <- ifelse(svm_vanilla_predict >= 0.5, 1, 0)
confusionMatrix(as.factor(svm_vanilla_bin), as.factor(test_data_labels))
# RBF Model
svm_rbf_model <- ksvm(heart_disease ~ ., data = train_data, kernel = "rbfdot")
svm_rbf_predict <- predict(svm_rbf_model, test_data)
svm_rbf_bin <- ifelse(svm_rbf_predict >= 0.5, 1, 0)
confusionMatrix(as.factor(svm_rbf_bin), as.factor(test_data_labels))
# New Data frame with raw prediction values from all models
combined <- data.frame(
lr_predict,
knn_predict,
ann_predict,
svm_rbf_predict,
svm_laplace_predict,
svm_vanilla_predict,
tree_predict,
test_data_labels
)
summary(combined)
set.seed(12345)
#Split data
combined_rows <- sample(1:nrow(combined), 0.5*nrow(combined))
# Train Data
combined_train <- combined[combined_rows,]
# Test Data
combined_test <- combined[-combined_rows,]
# Cost Matrix
error_cost <- matrix(nrow = 2, ncol = 2, data = c(0,0,0,0))
# Build Decision Tree Model of Models
combined_model <- C5.0(as.factor(test_data_labels) ~., data = combined_train, cost = error_cost)
#Predict against test data
combined_predict <- predict(combined_model, combined_test)
# Confusion Matrix
confusionMatrix(as.factor(combined_predict),as.factor(combined_test$test_data_labels))
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(class)
library(neuralnet)
library(kernlab) # for svm
library(C50) # for decision trees
library(randomForest)
library(tidyr)
library(dplyr)
library(janitor)
heart <- read.csv("heart.csv", stringsAsFactors = TRUE)
summary(heart)
heart_mm <- as.data.frame(model.matrix(~., -1, data = heart))
heart_mm <- clean_names(heart_mm)
heart_mm$intercept <- NULL
#Normalize the data
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# we are going to normalize for KNN and ANN
heart_norm <- as.data.frame(lapply(heart_mm, normalize))
str(heart_norm)
set.seed(12345)
# Train/Test Proportion
ratio <- 0.5
# Split Train and Test Data
train_rows <- sample(1:nrow(heart_norm), ratio*nrow(heart_norm))
train_data <- heart_norm[train_rows, ]
test_data <- heart_norm[-train_rows, ]
# Traina and Test without Labels
train_data_predictors <- train_data[,-16]
test_data_predictors <- test_data[,-16]
# Labels for Train and Test Sets
train_data_labels <- train_data[,16]
test_data_labels <- test_data[,16]
set.seed(12345)
# Build model
lr_model <- glm(heart_disease ~., family = "binomial", data = train_data)
summary(lr_model)
lr_predict <- predict(lr_model, test_data, type = "response")
lr_bin <- ifelse(lr_predict >= 0.5, 1, 0)
confusionMatrix(as.factor(lr_bin), as.factor(test_data_labels), positive = "1")
set.seed(12345)
# Build Model
tree_model <- C5.0(as.factor(heart_disease) ~. ,data = train_data)
# Predict
tree_predict <- predict(tree_model, test_data)
# Confusion Matrix
confusionMatrix(as.factor(tree_predict), as.factor(test_data_labels), positive = "1")
set.seed(12345)
# Model and Predictions
knn_predict <- knn(train_data_predictors, test_data_predictors, train_data_labels, k = 21, prob = 0.4)
# Confusion Matrix
knn_matrix <- as.data.frame(as.table(confusionMatrix(as.factor(knn_predict), as.factor(test_data_labels), positive = "1")))
# Confusion Matrix
confusionMatrix(as.factor(knn_predict), as.factor(test_data_labels), positive = "1")
set.seed(12345)
# Build model
ann_model <- neuralnet(heart_disease ~ ., data = train_data, hidden = c(4,2), threshold = 0.01, stepmax = 1e+08, algorithm = "slr")
# Plot Model
plot(ann_model)
# Predict
ann_predict <- predict(ann_model, test_data, type = "response")
test_ann_predict <- ifelse(ann_predict >= .3, 1, 0)
# Confusion Matrix
ann_matrix <- as.data.frame(as.table(confusionMatrix(as.factor(test_ann_predict), as.factor(test_data$heart_disease), positive = "1")))
# Confusion Matrix
confusionMatrix(as.factor(test_ann_predict), as.factor(test_data$heart_disease), positive = "1")
set.seed(12345)
# Build model
rf_model <- randomForest(heart_disease ~ ., data = train_data, ntree = 200)
# Plot model
plot(rf_model)
# Predict
rf_predict <- predict(rf_model, test_data, type = "response")
# Make output binary
rf_bin_predict <- ifelse(rf_predict >= .3, 1, 0)
# Confusion Matrix
confusionMatrix(as.factor(rf_bin_predict), as.factor(test_data$heart_disease), positive = "1")
# Laplace Model
svm_laplace_model <- ksvm(heart_disease ~ ., data = train_data, kernel = "laplacedot")
svm_laplace_predict <- predict(svm_laplace_model, test_data)
svm_laplace_bin <- ifelse(svm_laplace_predict >= 0.5, 1, 0)
confusionMatrix(as.factor(svm_laplace_bin), as.factor(test_data_labels))
# Vanilla Model
svm_vanilla_model <- ksvm(heart_disease ~ ., data = train_data, kernel = "vanilladot")
svm_vanilla_predict <- predict(svm_vanilla_model, test_data)
svm_vanilla_bin <- ifelse(svm_vanilla_predict >= 0.5, 1, 0)
confusionMatrix(as.factor(svm_vanilla_bin), as.factor(test_data_labels))
# RBF Model
svm_rbf_model <- ksvm(heart_disease ~ ., data = train_data, kernel = "rbfdot")
svm_rbf_predict <- predict(svm_rbf_model, test_data)
svm_rbf_bin <- ifelse(svm_rbf_predict >= 0.5, 1, 0)
confusionMatrix(as.factor(svm_rbf_bin), as.factor(test_data_labels))
# New Data frame with raw prediction values from all models
combined <- data.frame(
lr_predict,
knn_predict,
ann_predict,
svm_rbf_predict,
svm_laplace_predict,
svm_vanilla_predict,
tree_predict,
test_data_labels
)
summary(combined)
set.seed(12345)
#Split data
combined_rows <- sample(1:nrow(combined), 0.7*nrow(combined))
# Train Data
combined_train <- combined[combined_rows,]
# Test Data
combined_test <- combined[-combined_rows,]
# Cost Matrix
error_cost <- matrix(nrow = 2, ncol = 2, data = c(0,0,0,0))
# Build Decision Tree Model of Models
combined_model <- C5.0(as.factor(test_data_labels) ~., data = combined_train, cost = error_cost)
#Predict against test data
combined_predict <- predict(combined_model, combined_test)
# Confusion Matrix
confusionMatrix(as.factor(combined_predict),as.factor(combined_test$test_data_labels))
# Build Decision Tree Model of Models
combined_model <- C5.0(as.factor(test_data_labels) ~., data = combined_train, cost = error_cost)
#Predict against test data
combined_predict <- predict(combined_model, combined_test)
# Confusion Matrix
confusionMatrix(as.factor(combined_predict),as.factor(combined_test$test_data_labels))
